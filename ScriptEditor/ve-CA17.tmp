using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using ICSharpCode.TextEditor;
using ICSharpCode.TextEditor.Document;

namespace ScriptEditor
{
    class Script
    {
        String patch;
        String safePatch;

        TextEditorControl textBox = new TextEditorControl();

        scriptEditorForm editor;
        TabPage tabPage;

        Boolean modified = false;
        Boolean isNew = false;

        public TextEditorControl TextBox
        {
            get { return textBox; }
            set { textBox = value; }
        }

        public Boolean IsNew
        {
            get { return isNew; }
            set { isNew = value; }
        }

        public Boolean Modified
        {
            get { return modified; }
            set { modified = value; if (!value) tabPage.Text = safePatch; }
        }

        public String Patch
        {
            get { return patch; }
            set { patch = value; }
        }

        public String SafePatch
        {
            get { return safePatch; }
            set { safePatch = value; }
        }

        public Script(String patch, scriptEditorForm editor)
        {
            this.patch = patch;
            this.editor = editor;
        }
        
        public void loadScriptCommands(TabPage newPage)
        {
            textBox.ActiveTextAreaControl.TextArea.KeyPress += new KeyPressEventHandler(this.onKeyPress);
            textBox.ActiveTextAreaControl.TextArea.KeyUp += new System.Windows.Forms.KeyEventHandler(this.onKeyUp);
            textBox.ActiveTextAreaControl.TextArea.KeyDown += new System.Windows.Forms.KeyEventHandler(this.onKeyDown);
            textBox.ActiveTextAreaControl.TextArea.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.onPreviewKeyDown);
            textBox.Document.DocumentChanged += new DocumentEventHandler(this.onTextChanged);

            textBox.Dock = System.Windows.Forms.DockStyle.Fill;
            textBox.Font = new Font("Courier New", 10);
            textBox.IsReadOnly = false;

            newPage.Controls.Add(textBox);

            textBox.ShowInvalidLines = false;
            textBox.ShowSpaces = false;
            textBox.ShowEOLMarkers = false;
            textBox.ShowTabs = false;
            textBox.ShowHRuler = false;
            textBox.ShowMatchingBracket = false;
            textBox.ShowVRuler = false;

            textBox.SetHighlighting("AthenaScript");

            tabPage = newPage;
        }

        public void loadFile()
        {
            if (File.Exists(patch))
                textBox.LoadFile(patch);
        }

        public Boolean save()
        {
            if (IsNew)
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.FileName = safePatch;
                saveFileDialog.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*";

                DialogResult result = saveFileDialog.ShowDialog(editor);
                saveFileDialog.Dispose();

                if (result == DialogResult.OK)
                {
                    patch = saveFileDialog.FileName;
                    safePatch = Path.GetFileName(patch);

                    textBox.SaveFile(patch);
                    Modified = false;
                    IsNew = false;
                }
                else if (result == DialogResult.Cancel)
                    return false;
            }
            else
            {
                textBox.SaveFile(patch);
                Modified = false;
            }

            editor.save.Enabled = false;
            editor.saveAll.Enabled = false;

            redoUndoPos = 0;

            return true;
        }

        public bool canUndo() { return textBox.EnableUndo; }

        public bool canRedo() { return textBox.EnableRedo; }

        public void undo() { redoUndoPos -= 1; textBox.Undo(); }

        public void redo() { redoUndoPos += 1; textBox.Redo(); }

        private void onKeyPress(object sender, KeyPressEventArgs e) { }

        Int32 redoUndoPos = 0;
        private Boolean ctrlPress = false;
        private void onKeyUp(object sender, KeyEventArgs e)
        {
            if (ctrlPress)
            {
                if (e.KeyCode == Keys.S)
                    save();
                else if (e.KeyCode == Keys.F)
                    editor.openSearchDialog();
            }
        }
        private void onKeyDown(object sender, KeyEventArgs e)
        {
            if(!e.Shift && !e.Control && !e.Alt)
                redoUndoPos += 1;
        }
        private void onPreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            ctrlPress = e.Control;
            if (ctrlPress)
            {
                if (e.KeyCode == Keys.Z && canUndo())
                    redoUndoPos -= 1;
                else if (e.KeyCode == Keys.Y && canRedo())
                    redoUndoPos += 1;
                else if (e.KeyCode == Keys.S)
                    save();
            }
        }

        public void checkRedoUndoPos()
        {
            editor.save.Enabled = !(redoUndoPos == 0);
            editor.saveAll.Enabled = !(redoUndoPos == 0);
            editor.undo.Enabled = canUndo();
            editor.redo.Enabled = canRedo();
        }

        private void onTextChanged(object sender, EventArgs e)
        {
            String _patch = Path.GetFileName(patch);
            tabPage.Text = (!(redoUndoPos == 0) ? _patch + "*" : _patch);

            modified = true;
            editor.save.Enabled = true;
            editor.saveAll.Enabled = true;

            editor.undo.Enabled = canUndo();
            editor.redo.Enabled = canRedo();

            checkRedoUndoPos();
        }

        public void clear()
        {
            textBox.Dispose();
            textBox = null;
            System.GC.SuppressFinalize(this);
        }
    }
}
